import React, {useEffect, useRef} from "react";
import "./textfx.css";

export const MotionTrail: React.FC<{text: string; play?: boolean; className?: string}> = ({text, play=true, className}) => {
  const host = useRef<HTMLDivElement>(null);

  useEffect(() => {
    let raf = 0, t = 0, x = 0, y = 0;
    const el = host.current;
    if (!el) return;

    const coreTxt = el.querySelector(".core .txt") as HTMLDivElement | null;
    const g1 = el.querySelector(".g1 .txt") as HTMLDivElement | null;
    const g2 = el.querySelector(".g2 .txt") as HTMLDivElement | null;
    const g3 = el.querySelector(".g3 .txt") as HTMLDivElement | null;

    const loop = () => {
      t += 0.016;
      const tx = Math.cos(t*1.2)*6;
      const ty = Math.sin(t*0.9)*4;
      x += (tx - x)*0.08; y += (ty - y)*0.08;
      if (coreTxt) coreTxt.style.transform = `translate(${x}px, ${y}px)`;
      if (g1){ g1.style.transform = `translate(${x*0.6}px, ${y*0.6}px)`; (g1.parentElement as HTMLElement).style.opacity = ".25"; }
      if (g2){ g2.style.transform = `translate(${x*0.3}px, ${y*0.3}px)`; (g2.parentElement as HTMLElement).style.opacity = ".18"; }
      if (g3){ g3.style.transform = `translate(${x*0.12}px, ${y*0.12}px)`; (g3.parentElement as HTMLElement).style.opacity = ".12"; }
      raf = requestAnimationFrame(loop);
    };
    raf = requestAnimationFrame(loop);
    return () => cancelAnimationFrame(raf);
  }, []);

  return (
    <div ref={host} className={`demo lg fx-trail ${className ?? ""}`} data-play={play ? "1" : undefined}>
      <div className="ghost g1"><div className="txt">{text}</div></div>
      <div className="ghost g2"><div className="txt">{text}</div></div>
      <div className="ghost g3"><div className="txt">{text}</div></div>
      <div className="core"><div className="txt">{text}</div></div>
    </div>
  );
};
